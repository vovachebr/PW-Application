{"version":3,"sources":["logo.svg","types/index.ts","types/actions.ts","redux/reducers/user.ts","redux/reducers/transactions.ts","redux/reducers/index.ts","redux/reducers/applicationErrors.ts","views/forms/RegistrationForm.tsx","views/forms/LoginForm.tsx","views/ApplicationHeader.tsx","views/UserCard.tsx","views/LogoutButton.tsx","views/MoneyTransferForm.tsx","views/TransactionsTable.tsx","pages/loginPage/LoginPage.tsx","pages/homePage/HomePage.tsx","redux/actions/authentifications.ts","redux/actions/user.ts","redux/actions/transactions.ts","redux/selectors/applicationErrorsSelectors.ts","redux/selectors/userSelectors.ts","containers/ApplicationRouter.tsx","containers/forms/RegistrationForm.tsx","containers/forms/LoginForm.tsx","containers/UserCard.tsx","containers/LogoutButton.tsx","redux/selectors/transactions.ts","containers/MoneyTransferForm.tsx","containers/TransactionsTable.tsx","App.tsx","index.tsx"],"names":["module","exports","Actions","InitialState","isLoadingUsersList","users","initialState","isLoadingTransaction","transactionsList","main","combineReducers","applicationErrors","state","action","type","APPLICATION_HTTP_MESSAGE","message","payload","REMOVE_APPLICATION_MESSAGE","user","SET_USER_INFO","userInfo","UPDATE_BALANCE","balance","LOADING_USERS","LOADED_USERS","transactions","LOADING_COMMIT_TRANSACTION","SET_TRANSACTIONS","PUSH_TRANSACTION","concat","useStyles","makeStyles","form","width","field","marginBottom","RegistrationForm","onSubmit","classes","useState","login","setLogin","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","FormControl","className","TextField","value","onChange","e","target","label","variant","Button","color","onClick","LoginForm","header","backgroundColor","minHeight","display","flexDirection","alignItems","justifyContent","fontSize","logo","height","ApplicationHeader","src","alt","root","body","boxSizing","UserCard","Card","CardContent","Typography","gutterBottom","id","name","component","LogoutButton","input","marginTop","controllers","button","MoneyTransferForm","isLoading","amountValue","recipient","onRecipientChange","onChangeAmount","React","open","setOpen","Autocomplete","onOpen","onClose","getOptionSelected","option","getOptionLabel","onInputChange","event","options","loading","renderInput","params","InputProps","endAdornment","CircularProgress","size","String","Number","parseFloat","CardActions","disabled","TransactionsTable","isBlockRepeat","onRepeat","tableIcons","Clear","forwardRef","props","ref","DetailPanel","ChevronRight","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Search","SortArrow","ArrowDownward","columns","title","render","row","Refresh","icons","data","paddingTop","LoginPage","tabValue","setTabValue","AppBar","position","Tabs","indicatorColor","Tab","page","margin","card","HomePage","applicationHttpError","createAction","removeApplicationMessage","autorizeUser","url","dispatch","a","fetch","method","headers","Accept","JSON","stringify","response","ok","json","result","id_token","localStorage","setItem","window","location","reload","text","loadingUsers","loadedUsers","loadingCommitTransaction","updateBalance","setTransactions","pushTransaction","commitTransactionFetch","amount","getItem","trans_token","applicationMessageSelector","createSelector","errorsState","userState","userInfoSelector","userBalanceSelector","usersListSelector","isLoadingUsersListSelector","ApplicationRouterContainer","withSnackbar","connect","enqueueSnackbar","logged","setTimeout","path","to","exact","register","userData","confirm","hasError","test","validateData","username","userInfoFetch","user_info_token","includes","removeItem","transactionsState","transactionsListSelector","isLoadingTransactionsSelector","userBalance","loadUsers","filter","userListFetch","commitTransaction","interval","setAmount","setRecipient","clearTimeout","getTransaction","useEffect","map","t","date","split","time","trim","transaction","Math","abs","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","App","maxSnack","require","config","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b0b10a3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","export * from './userTypes';\nexport * from './actions';\nexport * from './stateActions';\nexport * from './transactions';","export enum Actions{\n  APPLICATION_HTTP_MESSAGE = \"APPLICATION_HTTP_MESSAGE\",\n  REMOVE_APPLICATION_MESSAGE = \"REMOVE_APPLICATION_MESSAGE\",\n  SET_USER_INFO = \"SET_USER_INFO\",\n  LOADING_USERS = \"LOADING_USERS\",\n  LOADED_USERS = \"LOADED_USERS\",\n  LOADING_COMMIT_TRANSACTION = \"LOADING_COMMIT_TRANSACTION\",\n  UPDATE_BALANCE = \"UPDATE_BALANCE\",\n  PUSH_TRANSACTION = \"PUSH_TRANSACTION\",\n  SET_TRANSACTIONS = \"SET_TRANSACTIONS\"\n}","import { Actions, UserState } from \"../../types\";\n\ntype Action = {\n  type: string;\n  payload: any;\n}\n\nconst InitialState = {\n  isLoadingUsersList: false,\n  users: []\n}\n\nexport default function(state: UserState = InitialState, action: Action) {\n  switch (action.type) {\n    case Actions.SET_USER_INFO:\n      return { ...state, userInfo: action.payload };\n    case Actions.UPDATE_BALANCE:\n      return { ...state, userInfo: {...state.userInfo, balance: action.payload} };\n    case Actions.LOADING_USERS:\n      return { ...state, isLoadingUsersList: action.payload };\n    case Actions.LOADED_USERS:\n      return { ...state, users: action.payload };\n    default:\n      return state;\n  }\n}","import { Actions, TransactionsState } from \"../../types\";\n\ntype Action = {\n  type: string;\n  payload: any;\n}\n\nconst initialState = {\n  isLoadingTransaction: false,\n  transactionsList: []\n};\n\nexport default function(state: TransactionsState = initialState, action: Action) {\n  switch (action.type) {\n    case Actions.LOADING_COMMIT_TRANSACTION:\n      return { ...state, isLoadingTransaction: action.payload };\n    case Actions.SET_TRANSACTIONS:\n      return { ...state, transactionsList: action.payload };\n    case Actions.PUSH_TRANSACTION:\n      return { ...state, transactionsList: state.transactionsList.concat(action.payload) };\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport applicationErrors from './applicationErrors';\nimport user from './user';\nimport transactions from './transactions';\n\nconst main = combineReducers({\n  applicationErrors,\n  user,\n  transactions\n})\n\nexport default main;\nexport type RootState = ReturnType<typeof main>;","import { Actions, ApplicationErrorState } from \"../../types\";\n\ntype Action = {\n  type: string;\n  payload: {\n    value: string;\n    type: string;\n  };\n}\n\nexport default function(state: ApplicationErrorState = {}, action: Action) {\n  switch (action.type) {\n    case Actions.APPLICATION_HTTP_MESSAGE:\n      return { message: action.payload };\n    case Actions.REMOVE_APPLICATION_MESSAGE:\n        return {};\n    default:\n      return state;\n  }\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { FormControl, TextField, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  form: {\r\n    width: '50%'\r\n  },\r\n  field: {\r\n    marginBottom: '15px'\r\n  }\r\n});\r\n\r\ntype IForm = {\r\n  onSubmit: (login: string, email: string, password: string, confirm: string) => void;\r\n}\r\n\r\nexport function RegistrationForm({onSubmit}: IForm) {\r\n  const classes = useStyles();\r\n\r\n  const [login, setLogin] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <FormControl className={classes.form}>\r\n        <TextField\r\n          className={classes.field}\r\n          value={login}\r\n          onChange={(e) => setLogin(e.target.value)}\r\n          label=\"Login\" \r\n          variant=\"outlined\"\r\n        />\r\n        <TextField\r\n          className={classes.field}\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          label=\"Email\"\r\n          type=\"email\" \r\n          variant=\"outlined\"\r\n        />\r\n        <TextField\r\n          className={classes.field}\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          label=\"Password\"\r\n          type=\"password\" \r\n          variant=\"outlined\"\r\n        />\r\n        <TextField\r\n          className={classes.field}\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          label=\"Confirm password\"\r\n          type=\"password\" \r\n          variant=\"outlined\"\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => onSubmit(login, email, password, confirmPassword)}\r\n        >\r\n          sing up\r\n        </Button>\r\n      </FormControl>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { FormControl, TextField, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  form: {\r\n    width: '50%'\r\n  },\r\n  field: {\r\n    marginBottom: '15px'\r\n  }\r\n});\r\n\r\ntype IForm = {\r\n  onSubmit: (email: string, password: string) => void;\r\n}\r\n\r\nexport function LoginForm({onSubmit}: IForm) {\r\n  const classes = useStyles();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <FormControl className={classes.form}>\r\n        <TextField \r\n          className={classes.field}\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          label=\"Email\"\r\n          type=\"email\"\r\n          variant=\"outlined\"\r\n        />\r\n        <TextField\r\n          className={classes.field}\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          variant=\"outlined\"\r\n        />\r\n        <Button variant=\"contained\" color=\"primary\" onClick={() => onSubmit(email, password)}>\r\n          sing in\r\n        </Button>\r\n      </FormControl>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '../logo.svg';\n\nconst useStyles = makeStyles({\n  header: {\n    backgroundColor: '#282c34',\n    minHeight: '5vh',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: 'calc(5px + 2vmin)',\n    color: 'white',\n  },\n  logo: {\n    height: '5vh',\n  }\n});\n\nexport function ApplicationHeader() {\n  const classes = useStyles();\n\n  return (\n    <header className={classes.header}>\n      <img src={logo} className={classes.logo} alt=\"logo\" />\n      <p>PW Application</p>\n      <img src={logo} className={classes.logo} alt=\"logo\" />\n    </header>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'inline-block',\n    width: '30%',\n  },\n  body: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    height: '100%',\n    boxSizing: 'border-box',\n  }\n});\n\ntype ICard = {\n  userInfo: {\n    id: number;\n    name: string;\n    email: string;\n    balance: number;\n  };\n}\n\nexport function UserCard({userInfo}: ICard) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent className={classes.body}>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`id: ${userInfo.id}`}\n        </Typography>\n        <Typography variant=\"h5\">\n          {`Name: ${userInfo.name}`}\n        </Typography>\n        <Typography color=\"textSecondary\">\n          {`Email: ${userInfo.email}`}\n        </Typography>\n        <Typography component=\"span\">\n          {`Balance: ${userInfo.balance}`}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react'\nimport { Button } from '@material-ui/core';\n\nexport const LogoutButton = ({onClick}: {onClick: () => void}) =>\n  <Button variant=\"contained\" color=\"primary\" onClick={onClick}>\n    Logout\n  </Button>","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Autocomplete } from '@material-ui/lab';\nimport { \n  Card,\n  CardContent,\n  CardActions,\n  CircularProgress,\n  TextField,\n  Typography,\n  Button\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  input: {\n    width: 400,\n    marginTop: 20,\n  },\n  controllers: {\n    justifyContent: 'center',\n    height: '50px'\n  },\n  button: {\n    width: '80%'\n  }\n});\n\ntype MoneyTransferFormType = {\n  users: Array<{id: number, name: string}>;\n  isLoading: boolean;\n  isLoadingTransaction: boolean;\n  amountValue: number;\n  recipient: string;\n  onRecipientChange: (value:string) => void;\n  onChangeAmount: (value:number) => void;\n  onSubmit: () => void;\n}\n\nexport function MoneyTransferForm({\n  users,\n  isLoading,\n  isLoadingTransaction,\n  amountValue,\n  recipient,\n  onRecipientChange,\n  onChangeAmount,\n  onSubmit\n}: MoneyTransferFormType) {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <Typography variant=\"h5\">\n          Transfer money\n        </Typography>\n        <Autocomplete\n          className={classes.input}\n          open={open}\n          onOpen={() => {setOpen(true)}}\n          onClose={() => {setOpen(false)}}\n          getOptionSelected={(option, value) => option.name === value.name}\n          getOptionLabel={(option) => option.name}\n          onInputChange={(event, value)=> onRecipientChange(value)}\n          options={users}\n          loading={isLoading}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              value={recipient}\n              onChange={(event)=>onRecipientChange(event.target.value)}\n              label=\"Recipient\"\n              variant=\"outlined\"\n              InputProps={{\n                ...params.InputProps,\n                endAdornment: (\n                  <>\n                    {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                    {params.InputProps.endAdornment}\n                  </>\n                ),\n              }}\n            />\n          )}\n        />\n        <TextField\n          className={classes.input}\n          value={String(Number(amountValue))}\n          onChange={(event) => onChangeAmount(Number.parseFloat(event.target.value))}\n          label=\"Amount\"\n          type=\"number\"\n          variant=\"outlined\"\n        />\n      </CardContent>\n      <CardActions className={classes.controllers}>\n        <Button\n          className={classes.button}\n          disabled={isLoadingTransaction}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onSubmit}\n        >\n          {isLoadingTransaction ? <CircularProgress size={25}/> : \"Transfer\"}\n        </Button>\n      </CardActions>\n    </Card>);\n}","import React, { forwardRef } from 'react';\nimport MaterialTable from 'material-table';\nimport { Button } from '@material-ui/core';\nimport {\n  Clear,\n  ChevronRight,\n  FirstPage,\n  LastPage,\n  ChevronLeft,\n  Search,\n  ArrowDownward,\n  Refresh\n} from '@material-ui/icons';\nimport { TransactionType } from '../types';\n\ntype TransactionsTable = {\n  transactions: Array<TransactionType>;\n  isBlockRepeat: boolean;\n  onRepeat: (transaction: TransactionType) => void;\n}\n\nexport function TransactionsTable({transactions, isBlockRepeat, onRepeat}: TransactionsTable) {\n  const tableIcons = {\n    Clear: forwardRef<SVGSVGElement>((props, ref) => <Clear {...props} ref={ref} />),\n    DetailPanel: forwardRef<SVGSVGElement>((props, ref) => <ChevronRight {...props} ref={ref} />),\n    FirstPage: forwardRef<SVGSVGElement>((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef<SVGSVGElement>((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef<SVGSVGElement>((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef<SVGSVGElement>((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef<SVGSVGElement>((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef<SVGSVGElement>((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef<SVGSVGElement>((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  };\n\n  const columns = [\n    {title: \"Id\", field: \"id\"},\n    {title: \"Date\", field: \"date\"},\n    {title: \"Time\", field: \"time\"},\n    {title: \"User\", field: \"username\"},\n    {title: \"Amount\", field: \"amount\"},\n    {title: \"Balance\", field: \"balance\"},\n    {title: \"Repeat\", render: (row: TransactionType) => \n    <Button \n      variant=\"contained\"\n      disabled={isBlockRepeat}\n      onClick={() => onRepeat(row)}>\n      <Refresh />\n    </Button>\n    }\n  ]\n  return (\n    <MaterialTable\n      title=\"User transactions\"\n      icons={tableIcons}\n      columns={columns}\n      data={transactions}\n    />\n  );\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Tabs, Tab } from '@material-ui/core';\r\n\r\nimport { RegistrationForm, LoginForm } from '../../containers';\r\n\r\nconst useStyles = makeStyles({\r\n  form: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    paddingTop: '5%',\r\n  }\r\n});\r\n\r\nexport function LoginPage() {\r\n  const classes = useStyles();\r\n  const [tabValue, setTabValue] = React.useState(\"registration\");\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={(event, value) => setTabValue(value)}\r\n          indicatorColor=\"primary\"\r\n          variant=\"fullWidth\"\r\n        >\r\n          <Tab label=\"Sign in\" value=\"authorization\" />\r\n          <Tab label=\"Sign up\" value=\"registration\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className={classes.form}>\r\n      {tabValue === \"authorization\" && <LoginForm />}\r\n      {tabValue === \"registration\" && <RegistrationForm />}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { UserCard, LogoutButton, TransactionsTable, MoneyTransferForm } from '../../containers';\n\nconst useStyles = makeStyles({\n  page: {\n    margin: \"20px 20px auto 20px\",\n  },\n  card: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginBottom: \"20px\",\n  },\n});\n\nexport function HomePage() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.page}>\n      <div className={classes.card}>\n        <UserCard />\n        <MoneyTransferForm />\n        <div>\n          <LogoutButton />\n        </div>\n      </div>\n      <TransactionsTable />\n    </div>\n  );\n}\n","import { Dispatch } from 'react';\nimport { createAction } from 'redux-actions';\nimport { Actions, UserRegister, UserLogin } from '../../types';\nexport const applicationHttpError = createAction<{value: string, type: string}>(Actions.APPLICATION_HTTP_MESSAGE);\nexport const removeApplicationMessage = createAction(Actions.REMOVE_APPLICATION_MESSAGE);\n\nexport const registerUserFetch = (user: UserRegister) => {\n  return (dispatch: Dispatch<any>) => {\n    autorizeUser('/users', user, dispatch);\n  }\n}\n\nexport const loginUserFetch = (user: UserLogin) => {\n  return (dispatch: Dispatch<any>) => {\n    autorizeUser('/sessions/create', user, dispatch);\n  }\n}\n\nconst autorizeUser = async (url: string, user: UserRegister | UserLogin, dispatch: Dispatch<any>) => {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify(user)\n  });\n  if(response.ok){\n    const result = await response.json();\n    if (result.id_token) {\n      localStorage.setItem(\"token\", result.id_token);\n      window.location.reload();\n    }\n  }else{\n    const result = await response.text();\n    dispatch(applicationHttpError({value: result, type: \"error\"}));\n  }\n}","import { Dispatch } from 'react';\nimport { createAction } from 'redux-actions';\nimport { UserInfo, Actions } from '../../types';\nimport { applicationHttpError } from '.';\n\nexport const userInfo = createAction<UserInfo>(Actions.SET_USER_INFO);\nexport const loadingUsers = createAction<boolean>(Actions.LOADING_USERS);\nexport const loadedUsers = createAction<Array<{id: number, name: string}>>(Actions.LOADED_USERS);\n\nexport const userInfoFetch = () => {\n  return async (dispatch: Dispatch<any>) => {\n    const response = await fetch('/api/protected/user-info', {\n      method: \"GET\",\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    });\n    if(response.ok){\n      const result = await response.json();\n      dispatch(userInfo(result.user_info_token));\n    }else{\n      const result = await response.text();\n      if(result.includes('jwt expired')){\n        localStorage.removeItem(\"token\");\n        window.location.reload();\n      }\n      dispatch(applicationHttpError({value: result, type: \"error\"}));\n    }\n  }\n}\n\nexport const userListFetch = (filter = '') => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(loadingUsers(true));\n    const response = await fetch('/api/protected/users/list', {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      body: JSON.stringify({filter})\n    });\n    if(response.ok){\n      const result = await response.json();\n      dispatch(loadedUsers(result));\n    }else{\n      const result = await response.text();\n      dispatch(applicationHttpError({value: result, type: \"error\"}));\n    }\n    dispatch(loadingUsers(false));\n  }\n}\n","import { Dispatch } from 'react';\nimport { createAction } from 'redux-actions';\nimport { Actions, TransactionType } from '../../types';\nimport { applicationHttpError } from '.';\n\nexport const loadingCommitTransaction = createAction<boolean>(Actions.LOADING_COMMIT_TRANSACTION);\nexport const updateBalance = createAction<boolean>(Actions.UPDATE_BALANCE);\nexport const setTransactions = createAction<Array<TransactionType>>(Actions.SET_TRANSACTIONS);\nexport const pushTransaction = createAction<TransactionType>(Actions.PUSH_TRANSACTION);\n\nexport const commitTransactionFetch = (name: string, amount: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(loadingCommitTransaction(true));\n    const response = await fetch('/api/protected/transactions', {\n      method: \"POST\",\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      body: JSON.stringify({name, amount})\n    });\n    if(response.ok){\n      const result = await response.json();\n      dispatch(updateBalance(result.trans_token.balance));\n      dispatch(pushTransaction(result.trans_token));\n      dispatch(applicationHttpError({value: \"Transfered successed\", type: \"info\"}));\n    }else{\n      const result = await response.text();\n      dispatch(applicationHttpError({value: result, type: \"error\"}));\n    }\n    dispatch(loadingCommitTransaction(false));\n  }\n}\n\nexport const getTransactionFetch = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(loadingCommitTransaction(true));\n    const response = await fetch('/api/protected/transactions', {\n      method: \"GET\",\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    });\n    if(response.ok){\n      const result = await response.json();\n      dispatch(setTransactions(result.trans_token));\n    }else{\n      const result = await response.text();\n      dispatch(applicationHttpError({value: result, type: \"error\"}));\n    }\n    dispatch(loadingCommitTransaction(false));\n  }\n}\n","import { createSelector } from 'reselect';\nimport { RootState } from '../reducers';\n\nconst applicationErrors = (state: RootState) => state.applicationErrors;\n\nexport const applicationMessageSelector = createSelector(\n  applicationErrors,\n  (errorsState) => errorsState.message\n)","import { createSelector } from 'reselect';\nimport { RootState } from '../reducers';\n\nconst userState = (state: RootState) => state.user;\n\nexport const userInfoSelector = createSelector(\n  userState,\n  (userState) => userState.userInfo\n)\n\nexport const userBalanceSelector = createSelector(\n  userInfoSelector,\n  (userInfo) => userInfo?.balance\n)\n\nexport const usersListSelector = createSelector(\n  userState,\n  (state) => state.users\n)\n\nexport const isLoadingUsersListSelector = createSelector(\n  userState,\n  (state) => state.isLoadingUsersList\n)","import React, { Dispatch } from 'react';\nimport { connect } from 'react-redux';\nimport { Action } from 'redux';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { withSnackbar } from 'notistack';\nimport { LoginPage, HomePage } from '../pages';\nimport { removeApplicationMessage } from '../redux/actions';\nimport { RootState } from '../redux/reducers';\nimport { applicationMessageSelector } from '../redux/selectors';\n\ntype ApplicationRouterType = {\n  message?: {value: string, type: string};\n  removeApplicationMessage: () => void;\n  enqueueSnackbar: any;\n}\n\nfunction ApplicationRouter({\n  enqueueSnackbar,\n  message,\n  removeApplicationMessage\n}: ApplicationRouterType) {\n  const logged = !!localStorage.getItem(\"token\");\n  if(message){\n    setTimeout(() => {\n      enqueueSnackbar(message.value, {variant: message.type})\n      removeApplicationMessage();\n    }, 0);\n  }\n  \n  return (\n    <BrowserRouter>\n      <Switch>\n        {!logged && <>\n          <Route path=\"/login\" component={LoginPage}/>\n          <Redirect to=\"/login\"/>\n        </>}\n        {logged && <>\n          <Route path=\"/home\" component={HomePage} exact/>\n          <Redirect to=\"/home\"/>\n        </>}\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  message: applicationMessageSelector(state),\n});\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n  removeApplicationMessage: () => dispatch(removeApplicationMessage())\n});\n\nexport const ApplicationRouterContainer = withSnackbar(\n  connect(mapStateToProps, mapDispatchToProps)\n  (ApplicationRouter)\n);\n","import React, { Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withSnackbar } from 'notistack';\r\nimport { RegistrationForm as RegistrationFormView } from '../../views';\r\nimport { registerUserFetch } from '../../redux/actions';\r\nimport { UserRegister } from '../../types';\r\n\r\ntype RegistrationFormType = {\r\n  register: (userData: any) => void;\r\n  enqueueSnackbar: any\r\n}\r\n\r\nfunction RegistrationFormContainer({enqueueSnackbar, register}: RegistrationFormType) {\r\n  const validateData = (login: string, email: string, password: string, confirm: string): boolean => {\r\n    let hasError = false;\r\n    if(password !== confirm){\r\n      hasError = true;\r\n      enqueueSnackbar(\"Passwords must be same\", {variant: \"error\"});\r\n    }\r\n    if(password === \"\"){\r\n      hasError = true;\r\n      enqueueSnackbar(\"Passwords can't be empty\", {variant: \"error\"});\r\n    }\r\n    if(!/\\S+@\\S+\\.\\S+/.test(email)){\r\n      hasError = true;\r\n      enqueueSnackbar(\"Email must be valid\", {variant: \"error\"});\r\n    }\r\n    if(!login){\r\n      hasError = true;\r\n      enqueueSnackbar(\"Login can't be empty\", {variant: \"error\"});\r\n    }\r\n    return hasError;\r\n  };\r\n\r\n  const submitForm = (login: string, email: string, password: string, confirm: string) => {\r\n    const hasError = validateData(login, email, password, confirm);\r\n    if(hasError){\r\n      return;\r\n    }\r\n\r\n    register({username: login, email, password});\r\n  }\r\n\r\n  return <RegistrationFormView onSubmit={submitForm}/>;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  register: (userData: UserRegister) => dispatch(registerUserFetch(userData))\r\n});\r\n\r\nexport const RegistrationForm = withSnackbar(\r\n  connect(null, mapDispatchToProps)\r\n  (RegistrationFormContainer)\r\n);\r\n","import React, { Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withSnackbar } from 'notistack';\r\nimport { LoginForm as LoginFormView } from '../../views';\r\nimport { loginUserFetch } from '../../redux/actions';\r\nimport { UserLogin } from '../../types';\r\n\r\ntype LoginFormType = {\r\n  login: (userData: any) => void;\r\n  enqueueSnackbar: any\r\n}\r\n\r\nfunction LoginFormContainer({enqueueSnackbar, login}: LoginFormType) {\r\n  const submitForm = (email: string, password: string) => {\r\n    const validateData = (email: string, password: string): boolean => {\r\n      let hasError = false;\r\n      if(password === \"\"){\r\n        hasError = true;\r\n        enqueueSnackbar(\"Passwords can't be empty\", {variant: \"error\"});\r\n      }\r\n      if(!/\\S+@\\S+\\.\\S+/.test(email)){\r\n        hasError = true;\r\n        enqueueSnackbar(\"Email must be valid\", {variant: \"error\"});\r\n      }\r\n      return hasError;\r\n    };\r\n\r\n    const hasError = validateData(email, password);\r\n    if(hasError){\r\n      return;\r\n    }\r\n\r\n    login({email, password});\r\n  }\r\n  \r\n  return <LoginFormView onSubmit={submitForm}/>\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\r\n  login: (userData: UserLogin) => dispatch(loginUserFetch(userData))\r\n});\r\n\r\nexport const LoginForm = withSnackbar(\r\n  connect(null, mapDispatchToProps)\r\n  (LoginFormContainer)\r\n);","import React, { Dispatch } from 'react';\nimport { connect } from 'react-redux';\nimport { CircularProgress } from '@material-ui/core';\nimport { UserCard as UserCardView } from '../views';\nimport { userInfoFetch } from '../redux/actions';\nimport { RootState } from '../redux/reducers';\nimport { userInfoSelector } from '../redux/selectors';\n\ntype UserCardType = {\n  userInfoFetch: () => void;\n  userInfo?: {\n    id: number;\n    name: string;\n    email: string;\n    balance: number;\n  };\n}\n\nexport function UserCardContainer({userInfoFetch, userInfo}: UserCardType) {\n  if(!userInfo){\n    userInfoFetch();\n    return <CircularProgress />;\n  }\n\n  return <UserCardView userInfo={userInfo}/>\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  userInfo: userInfoSelector(state),\n});\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  userInfoFetch: () => dispatch(userInfoFetch())\n});\n\nexport const UserCard = \n  connect(mapStateToProps, mapDispatchToProps)\n  (UserCardContainer);\n","import React from 'react';\nimport { LogoutButton as LogoutButtonView} from '../views';\n\nexport function LogoutButton(props: any) {\n  const logoutCallback = () => {\n    //запроса на логаут нету, поэтому просто удаляем его из LS и обновляем страницу\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  }\n  \n  return <LogoutButtonView onClick={logoutCallback} />\n}","import { createSelector } from 'reselect';\nimport { RootState } from '../reducers';\n\nconst transactionsState = (state: RootState) => state.transactions;\n\nexport const transactionsListSelector = createSelector(\n  transactionsState,\n  (state) => state.transactionsList\n)\n\nexport const isLoadingTransactionsSelector = createSelector(\n  transactionsState,\n  (state) => state.isLoadingTransaction\n)","import React, { useState, Dispatch } from 'react';\nimport { connect } from 'react-redux';\nimport { withSnackbar } from 'notistack';\nimport { MoneyTransferForm as MoneyTransferFormView } from '../views';\nimport { userListFetch } from '../redux/actions';\nimport { commitTransactionFetch } from '../redux/actions';\nimport { RootState } from '../redux/reducers';\nimport { userBalanceSelector, usersListSelector, isLoadingUsersListSelector } from '../redux/selectors';\nimport { isLoadingTransactionsSelector } from '../redux/selectors/transactions';\n\ntype MoneyTransferFormType = {\n  loadUsers: (filter: string) => void;\n  commitTransaction: (name: string, amount: number) => void;\n  isLoadingUsersList: boolean;\n  isLoadingTransaction: boolean;\n  users: Array<{id: number, name: string}>;\n  userBalance?: number;\n  enqueueSnackbar: any;\n}\n\nexport function MoneyTransferFormContainer({\n  loadUsers,\n  commitTransaction,\n  isLoadingUsersList,\n  isLoadingTransaction,\n  users=[],\n  userBalance,\n  enqueueSnackbar\n}: MoneyTransferFormType) {\n\n  let interval: number;\n  const [amount, setAmount] = useState(0);\n  const [recipient, setRecipient] = useState(\"\");\n  const onRecipientChange = (value: string) => {\n    // используется от многократной отправки запроса\n    if(interval){\n      clearTimeout(interval);\n    }\n    if(!!value){\n      interval = window.setTimeout(() => loadUsers(value), 500);\n      setRecipient(value);\n    }\n  };\n  const onChangeAmount = (value: number) => setAmount(value || 0);\n  const onSubmit = () => {\n    if(userBalance && userBalance < amount){\n      enqueueSnackbar(\"Not enough money\", {variant: \"error\"});\n      return;\n    }\n\n    if(amount === 0){\n      enqueueSnackbar(\"Can't transfer zero\", {variant: \"error\"});\n      return;\n    }\n\n    if(amount < 0){\n      enqueueSnackbar(\"Can't transfer negative amount\", {variant: \"error\"});\n      return;\n    }\n\n    if(!recipient){\n      enqueueSnackbar(\"Select user for transfer money\", {variant: \"error\"});\n      return;\n    }\n\n    commitTransaction(recipient, amount);\n  }\n\n  return <MoneyTransferFormView\n    users={users}\n    isLoading={isLoadingUsersList}\n    isLoadingTransaction={isLoadingTransaction}\n    amountValue={amount}\n    recipient={recipient}\n    onRecipientChange={onRecipientChange}\n    onChangeAmount={onChangeAmount}\n    onSubmit={onSubmit}\n  />\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  isLoadingUsersList: isLoadingUsersListSelector(state),\n  users: usersListSelector(state),\n  userBalance: userBalanceSelector(state),\n  isLoadingTransaction: isLoadingTransactionsSelector(state)\n});\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  loadUsers: (filter: string) => dispatch(userListFetch(filter)),\n  commitTransaction: (name: string, amount: number) => dispatch(commitTransactionFetch(name, amount))\n});\n\nexport const MoneyTransferForm = withSnackbar(\n  connect(mapStateToProps, mapDispatchToProps)\n  (MoneyTransferFormContainer)\n);","import React, { useEffect, Dispatch } from 'react';\nimport { connect } from 'react-redux';\nimport { withSnackbar } from 'notistack';\nimport { TransactionsTable as TransactionsTableView } from '../views';\nimport { getTransactionFetch, commitTransactionFetch } from '../redux/actions';\nimport { TransactionType } from '../types';\nimport { RootState } from '../redux/reducers';\nimport { userBalanceSelector } from '../redux/selectors';\nimport { isLoadingTransactionsSelector, transactionsListSelector } from '../redux/selectors/transactions';\n\ntype TransactionsTableType = {\n  isLoadingTransaction: boolean;\n  userBalance?: number;\n  transactionsList: Array<TransactionType>\n  getTransaction: () => void;\n  commitTransaction: (name: string, amount: number) => void;\n  enqueueSnackbar: any;\n}\n\nfunction TransactionsTableContainer({\n  isLoadingTransaction,\n  getTransaction,\n  userBalance,\n  transactionsList,\n  commitTransaction,\n  enqueueSnackbar\n}: TransactionsTableType) {\n\n  useEffect(() => getTransaction(), [])\n\n  const transferMoney = (transaction: TransactionType) => {\n    const amount = Math.abs(transaction.amount);\n    if(userBalance && userBalance < amount){\n      enqueueSnackbar(\"Not enough money\", {variant: \"error\"});\n      return;\n    }\n\n    commitTransaction(transaction.username, amount);\n  };\n\n  const data = transactionsList.map(t => ({...t, date: t.date.split(',')[0], time: t.date.split(',')[1].trim()}));\n  return <TransactionsTableView\n    transactions={data}\n    isBlockRepeat={isLoadingTransaction}\n    onRepeat={transferMoney}\n    />\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  isLoadingTransaction: isLoadingTransactionsSelector(state),\n  userBalance: userBalanceSelector(state),\n  transactionsList: transactionsListSelector(state)\n});\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n  getTransaction: () => dispatch(getTransactionFetch()),\n  commitTransaction: (name: string, amount: number) => dispatch(commitTransactionFetch(name, amount))\n});\n\nexport const TransactionsTable = withSnackbar(\n  connect(mapStateToProps, mapDispatchToProps)\n  (TransactionsTableContainer)\n);\n","import React from 'react';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport reducer from './redux/reducers';\r\nimport { ApplicationHeader } from './views';\r\nimport { ApplicationRouter } from './containers';\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nfunction App() {\r\n  return (\r\n    <SnackbarProvider maxSnack={5}>\r\n      <Provider store={store}>\r\n        <ApplicationHeader />\r\n        <ApplicationRouter />\r\n      </Provider>\r\n    </SnackbarProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}